Objective Overview
This project requires you to review the Verilog code, create the necessary PCF file, and integrate the design with the VSDSquadron FPGA Mini board using the provided datasheet. The goal is to successfully program the FPGA board to control an RGB LED and test the functionality of the code.

The steps are outlined as follows:

Understand the Verilog Code

Create the PCF File

Integrate the Design with the FPGA Board

Final Documentation

Step 1: Understanding the Verilog Code
Accessing the Verilog Code

The Verilog code for this project can be found in the following GitHub link:

Verilog Code: top.v

Analyzing the Code

Module Declaration: The module top contains several input and output ports:

Outputs:

led_red, led_blue, led_green: These control the RGB LED on the FPGA.

testwire: This is a test signal output.

Inputs:

hw_clk: This is the hardware oscillator clock input.

Internal Components:

SB_HFOSC: This is an instantiation of an internal high-frequency oscillator that generates a clock signal for internal logic.

Frequency Counter Logic: The logic counts the oscillator's clock pulses to produce a signal that can be used for controlling the RGB LED.

RGB LED Driver: The driver instantiates a controller for the RGB LED that is linked to the output ports (led_red, led_blue, led_green). The current for the LED is managed here.

Functionality:

The module works by using the internal oscillator to generate a frequency that is counted. Based on this counter, it drives the RGB LED in a pattern.

The output ports control the colors of the RGB LED by adjusting the state of led_red, led_blue, and led_green.

The testwire output is a signal used for testing or debugging.

Summary Documentation:

Purpose of the Module: The module controls an RGB LED based on a frequency generated by an internal oscillator and provides a test signal (testwire).

Internal Logic: The internal logic includes a frequency counter driven by the internal oscillator, which interacts with the RGB LED driver.

RGB LED Driver: It drives the LED's color output, controlled by the signals led_red, led_blue, and led_green.

Step 2: Creating the PCF File
Access the PCF File

The PCF (Pin Constraint File) defines the pin assignments for the FPGA. The file can be accessed here:

PCF File: VSDSquadronFM.pcf

Understanding Pin Assignments:

Pin Mapping:

led_red: Pin 39

led_blue: Pin 40

led_green: Pin 41

hw_clk: Pin 20

testwire: Pin 17

Cross-Referencing with the Datasheet:

Using the VSDSquadron FPGA Mini board datasheet, verify the correctness of the pin assignments. Ensure that the physical connections correspond correctly to the pin assignments in the PCF file.

Pin Mapping Documentation:

Significance of Connections:

The pins map the FPGA's output signals (led_red, led_blue, led_green) to the corresponding pins on the FPGA board to control the RGB LED.

The hw_clk input pin corresponds to the hardware oscillator clock used for the design.

The testwire pin can be connected to an external test device for debugging or observing the test signal.

Step 3: Integrating with the VSDSquadron FPGA Mini Board
Review the Datasheet:

Carefully examine the VSDSquadron FPGA Mini board datasheet to understand the features of the FPGA and its pinout.

Connecting the Board:

Use the USB-C cable to connect the board to your computer.

Ensure that the FTDI connection is made properly as described in the datasheet for programming the FPGA.

Building and Flashing the Design:

Access the provided Makefile to compile and flash the Verilog design:

Makefile Link

Commands to run:

make clean: Clears previous builds.

make build: Compiles the Verilog design.

sudo make flash: Programs the FPGA with the compiled design.

Observe the Behavior:

After flashing, observe the RGB LED to confirm that it is functioning as expected based on the Verilog code (the LED should change colors according to the frequency of the internal oscillator).

Step 4: Final Documentation
Compile Observations and Explanations:

Summarize the following:

Verilog Code Functionality: Explain how the Verilog code drives the RGB LED using the internal oscillator.

PCF Pin Mapping: Detail the pin assignments and their significance for the design.

Integration Steps: Document the process of connecting the FPGA board, building the design, and flashing the FPGA.

Challenges and Solutions: Note any issues faced during the process (e.g., hardware connections, pin mappings, software issues) and how they were resolved.

GitHub Repository:

Create a GitHub repository to document the final results, including:

The Verilog code (top.v)

The PCF file (VSDSquadronFM.pcf)

The Makefile

Detailed documentation (as described above)

Submit the Final Documentation:

Ensure all files and explanations are well-organized in the GitHub repository, and submit it for review.

